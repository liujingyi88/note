# lldb不会用，只能用gdb

# phase_1
(gdb) disas phase_1
Dump of assembler code for function phase_1:
   0x0000000000400ee0 <+0>:     sub    $0x8,%rsp                        // 栈指针%rsp - 0x8, 开辟0x8大小的字节空间
   0x0000000000400ee4 <+4>:     mov    $0x402400,%esi			// 将0x402400 赋值给 %esi
   0x0000000000400ee9 <+9>:     callq  0x401338 <strings_not_equal>     // 调用strings_not_equal函数
   0x0000000000400eee <+14>:    test   %eax,%eax			// 比较字符串是否相等, test b,a => a&b
   0x0000000000400ef0 <+16>:    je     0x400ef7 <phase_1+23>		// je, jump if eq/zero. 如果字符串相等或为0则跳过bomb，否则bomb
   0x0000000000400ef2 <+18>:    callq  0x40143a <explode_bomb>
   0x0000000000400ef7 <+23>:    add    $0x8,%rsp			
   0x0000000000400efb <+27>:    retq
End of assembler dump.

(gdb) x/s 0x402400
0x402400:       "Border relations with Canada have never been better."
# result: Border relations with Canada have never been better.

# phase_2
(gdb) disas phase_2
Dump of assembler code for function phase_2:
   0x0000000000400efc <+0>:     push   %rbp 				
   0x0000000000400efd <+1>:     push   %rbx
   0x0000000000400efe <+2>:     sub    $0x28,%rsp			// 栈指针%rsp开辟0x28大小字节空间
   0x0000000000400f02 <+6>:     mov    %rsp,%rsi			
   0x0000000000400f05 <+9>:     callq  0x40145c <read_six_numbers>
   0x0000000000400f0a <+14>:    cmpl   $0x1,(%rsp)			// cmp b,a => a-b, 有下面je可知(%rsp) = $0x1
   0x0000000000400f0e <+18>:    je     0x400f30 <phase_2+52>		// je, 如果字符串相等或为0则跳过bomb，否则bomb
   0x0000000000400f10 <+20>:    callq  0x40143a <explode_bomb>
   0x0000000000400f15 <+25>:    jmp    0x400f30 <phase_2+52>
   0x0000000000400f17 <+27>:    mov    -0x4(%rbx),%eax			// %eax = (%rbx - 0x4) = %rsp
   0x0000000000400f1a <+30>:    add    %eax,%eax			// %eax += %eax
   0x0000000000400f1c <+32>:    cmp    %eax,(%rbx)			// value at %rbx - %eax
   0x0000000000400f1e <+34>:    je     0x400f25 <phase_2+41>
   0x0000000000400f20 <+36>:    callq  0x40143a <explode_bomb>
   0x0000000000400f25 <+41>:    add    $0x4,%rbx			// %rbx += $0x4
   0x0000000000400f29 <+45>:    cmp    %rbp,%rbx			// 
   0x0000000000400f2c <+48>:    jne    0x400f17 <phase_2+27>		// jne, jump if !eq/!zero
   0x0000000000400f2e <+50>:    jmp    0x400f3c <phase_2+64>		
   0x0000000000400f30 <+52>:    lea    0x4(%rsp),%rbx			// %rbx = (%rsp + 0x4)   
   0x0000000000400f35 <+57>:    lea    0x18(%rsp),%rbp			// %rbp = (%rsp + 0x18)
   0x0000000000400f3a <+62>:    jmp    0x400f17 <phase_2+27>		// jmp, always jump
   0x0000000000400f3c <+64>:    add    $0x28,%rsp
   0x0000000000400f40 <+68>:    pop    %rbx
   0x0000000000400f41 <+69>:    pop    %rbp
   0x0000000000400f42 <+70>:    retq
End of assembler dump.

# 6 addresses of numbers: %rsp, %rsp+0x4, %rps+0x8, %rps+0xC, %rps+0x10, %rps+0x14, %rps+0x18
# +14, the first number is 1
# +30~+34, 前一个数是后一个数的2倍
# result: 1 2 4 8 16 32

# phase_3
(gdb) disas phase_3
Dump of assembler code for function phase_3:
   0x0000000000400f43 <+0>:     sub    $0x18,%rsp
   0x0000000000400f47 <+4>:     lea    0xc(%rsp),%rcx
   0x0000000000400f4c <+9>:     lea    0x8(%rsp),%rdx
   0x0000000000400f51 <+14>:    mov    $0x4025cf,%esi				// x/s 0x4025cf 可知result为输入2个数
   0x0000000000400f56 <+19>:    mov    $0x0,%eax
   0x0000000000400f5b <+24>:    callq  0x400bf0 <__isoc99_sscanf@plt>
   0x0000000000400f60 <+29>:    cmp    $0x1,%eax				// %eax > 1, 输入参数数量是否>1
   0x0000000000400f63 <+32>:    jg     0x400f6a <phase_3+39>			// jg, jump if greater
   0x0000000000400f65 <+34>:    callq  0x40143a <explode_bomb>
   0x0000000000400f6a <+39>:    cmpl   $0x7,0x8(%rsp)				// %rsp+0x8 与$0x7比较, 由ja可知<7
   0x0000000000400f6f <+44>:    ja     0x400fad <phase_3+106>			// ja, jump if above(unsigned >), 第一个数>=0
   0x0000000000400f71 <+46>:    mov    0x8(%rsp),%eax				// 
   0x0000000000400f75 <+50>:    jmpq   *0x402470(,%rax,8)		   	// switch，上面可知第一个数范围为0<=number_1<7, 0x402470+8*%rax
   0x0000000000400f7c <+57>:    mov    $0xcf,%eax				// 
   0x0000000000400f81 <+62>:    jmp    0x400fbe <phase_3+123>			
   0x0000000000400f83 <+64>:    mov    $0x2c3,%eax
   0x0000000000400f88 <+69>:    jmp    0x400fbe <phase_3+123>
   0x0000000000400f8a <+71>:    mov    $0x100,%eax
   0x0000000000400f8f <+76>:    jmp    0x400fbe <phase_3+123>
   0x0000000000400f91 <+78>:    mov    $0x185,%eax
   0x0000000000400f96 <+83>:    jmp    0x400fbe <phase_3+123>
   0x0000000000400f98 <+85>:    mov    $0xce,%eax
   0x0000000000400f9d <+90>:    jmp    0x400fbe <phase_3+123>
   0x0000000000400f9f <+92>:    mov    $0x2aa,%eax
   0x0000000000400fa4 <+97>:    jmp    0x400fbe <phase_3+123>
   0x0000000000400fa6 <+99>:    mov    $0x147,%eax
   0x0000000000400fab <+104>:   jmp    0x400fbe <phase_3+123>
   0x0000000000400fad <+106>:   callq  0x40143a <explode_bomb>
   0x0000000000400fb2 <+111>:   mov    $0x0,%eax
   0x0000000000400fb7 <+116>:   jmp    0x400fbe <phase_3+123>
   0x0000000000400fb9 <+118>:   mov    $0x137,%eax
   0x0000000000400fbe <+123>:   cmp    0xc(%rsp),%eax
   0x0000000000400fc2 <+127>:   je     0x400fc9 <phase_3+134>
   0x0000000000400fc4 <+129>:   callq  0x40143a <explode_bomb>
   0x0000000000400fc9 <+134>:   add    $0x18,%rsp
   0x0000000000400fcd <+138>:   retq
End of assembler dump.

(gdb) x/s 0x4025cf
0x4025cf:       "%d %d"
#跳转目录
(gdb) x/a (0x402470)
0x402470:       0x400f7c <phase_3+57>
(gdb) p/s 0xcf
$1 = 207
(gdb) x/a (0x402470+8)
0x402478:       0x400fb9 <phase_3+118>
(gdb) p/s 0x137
$2 = 311
(gdb) x/a (0x402470+16)
0x402480:       0x400f83 <phase_3+64>
(gdb) p/s 0x2c3
$3 = 707
(gdb) x/a (0x402470+24)
0x402488:       0x400f8a <phase_3+71>
(gdb) p/s 0x100
$4 = 256
(gdb) x/a (0x402470+32)
0x402490:       0x400f91 <phase_3+78>
(gdb) p/s 0x185
$5 = 389
(gdb) x/a (0x402470+40)
0x402498:       0x400f98 <phase_3+85>
(gdb) p/s 0xce
$6 = 206
(gdb) x/a (0x402470+48)
0x4024a0:       0x400f9f <phase_3+92>
(gdb) p/s 0x2aa
$7 = 682
(gdb) p/s 0x147
$8 = 327

# result:
0 207 
1 311
2 707
3 256
4 389
5 206
6 682
7 327

# phase_4
(gdb) disas phase_4
Dump of assembler code for function phase_4:
   0x000000000040100c <+0>:     sub    $0x18,%rsp				// makes stack frame
   0x0000000000401010 <+4>:     lea    0xc(%rsp),%rcx				// load effective address, second input = %rcx
   0x0000000000401015 <+9>:     lea    0x8(%rsp),%rdx				// first input = %rdx
   0x000000000040101a <+14>:    mov    $0x4025cf,%esi				// format of answer: %d %d
   0x000000000040101f <+19>:    mov    $0x0,%eax				// %eax = 0
   0x0000000000401024 <+24>:    callq  0x400bf0 <__isoc99_sscanf@plt>		// scanf函数，输入2个参数
   0x0000000000401029 <+29>:    cmp    $0x2,%eax				// 判断是否有2个参数，否则bomb
   0x000000000040102c <+32>:    jne    0x401035 <phase_4+41>			// jne, jump if !eq/!zero
   0x000000000040102e <+34>:    cmpl   $0xe,0x8(%rsp)				//  <= $0xe, 可知一个值必须<=14
   0x0000000000401033 <+39>:    jbe    0x40103a <phase_4+46>			// jbe, jump if below/equal
   0x0000000000401035 <+41>:    callq  0x40143a <explode_bomb>
   0x000000000040103a <+46>:    mov    $0xe,%edx				// %edx = 14
   0x000000000040103f <+51>:    mov    $0x0,%esi				// %esi = 0
   0x0000000000401044 <+56>:    mov    0x8(%rsp),%edi				// %edi = first input
   0x0000000000401048 <+60>:    callq  0x400fce <func4>				// go func4 (14,0,first input)
   0x000000000040104d <+65>:    test   %eax,%eax				// if %eax == 0? !bomb : bomb 
   0x000000000040104f <+67>:    jne    0x401058 <phase_4+76>
   0x0000000000401051 <+69>:    cmpl   $0x0,0xc(%rsp)				// if ($rsp+0xc) == 0 ? !bomb:bomb
   0x0000000000401056 <+74>:    je     0x40105d <phase_4+81>			// if 0 == second input DONE
   0x0000000000401058 <+76>:    callq  0x40143a <explode_bomb>
   0x000000000040105d <+81>:    add    $0x18,%rsp
   0x0000000000401061 <+85>:    retq
End of assembler dump.

(gdb) disas func4
Dump of assembler code for function func4:
   0x0000000000400fce <+0>:     sub    $0x8,%rsp				// makes stack frame
   0x0000000000400fd2 <+4>:     mov    %edx,%eax				// eax = 14
   0x0000000000400fd4 <+6>:     sub    %esi,%eax				// eax = eax - esi; eax = 14 - 0 = 14
   0x0000000000400fd6 <+8>:     mov    %eax,%ecx				// ecx = 14
   0x0000000000400fd8 <+10>:    shr    $0x1f,%ecx				// 0x1f = 31; ecx = 14 >> 31; 
   0x0000000000400fdb <+13>:    add    %ecx,%eax				// eax = eax + ecx; eax = 14 + 0 = 14
   0x0000000000400fdd <+15>:    sar    %eax					// eax = eax >> 1; 14 >> 1 = 7
   0x0000000000400fdf <+17>:    lea    (%rax,%rsi,1),%ecx			// ecx = rax +rsi = eax + rsi = 7
   0x0000000000400fe2 <+20>:    cmp    %edi,%ecx				// first input vs 7
   0x0000000000400fe4 <+22>:    jle    0x400ff2 <func4+36>			// if 7 <= first input
   0x0000000000400fe6 <+24>:    lea    -0x1(%rcx),%edx				// edx = rcx - 1
   0x0000000000400fe9 <+27>:    callq  0x400fce <func4>				// back to beginning
   0x0000000000400fee <+32>:    add    %eax,%eax				
   0x0000000000400ff0 <+34>:    jmp    0x401007 <func4+57>			
   0x0000000000400ff2 <+36>:    mov    $0x0,%eax				// eax = 0
   0x0000000000400ff7 <+41>:    cmp    %edi,%ecx				// exc = 7, first input vs 7
   0x0000000000400ff9 <+43>:    jge    0x401007 <func4+57>
   0x0000000000400ffb <+45>:    lea    0x1(%rcx),%esi				// esi = 1 + rcx, esi = 1 + 7 = 8
   0x0000000000400ffe <+48>:    callq  0x400fce <func4>				// back to beginning
   0x0000000000401003 <+53>:    lea    0x1(%rax,%rax,1),%eax			// eax = rax + rax + 1 = 2rax + 1
   0x0000000000401007 <+57>:    add    $0x8,%rsp				
   0x000000000040100b <+61>:    retq
End of assembler dump.

